using Xunit;
using CalculateAreaFigures;

namespace TestProjectCalculateAreaFigures
{
    public class TestCalculateAreaFigures
    {
        /// <summary>
        /// Проверка метода CalculateArea класса Circle
        /// </summary>
        [Theory]
        [InlineData(5.5D, 95.03317777109125D)]
        [InlineData(12D, 452.3893421169302D)]
        [InlineData(1, 3.141592653589793)]
        public void CalculateCircleAreaTest(double perimeter, double expected)
        {
            var curCircle = new ClassCircle(perimeter);
            var actual = curCircle.CalculateArea();

            Assert.Equal(expected, actual);
        }

        /// <summary>
        /// Проверка выбрасывания исключения при вводе отрицательного периметра круга
        /// </summary>
        [Fact]
        public void ThrowExceptionNegativePerimeterTest() =>
            Assert.Throws<System.Exception>(() => new ClassCircle(-10D));

        /// <summary>
        /// Проверка метода CalculateArea класса Triangle
        /// </summary>
        [Theory]
        [InlineData(5.5D, 3D, 4D, 5.854685623498498D)]
        [InlineData(12, 20, 17, 101.6658128379447)]
        [InlineData(3D, 4D, 5D, 6D)]
        public void CalculateTriangleAreaTest(double firstSide, double secondSide, double thirdSide, double expected)
        {
            var curTriangle = new ClassTriangle(firstSide, secondSide, thirdSide);

            var actual = curTriangle.CalculateArea();

            Assert.Equal(expected, actual);
        }

        /// <summary>
        /// Проверка корректности работы методы по определению прямоугольного треугольника
        /// </summary>
        /// <param name="firstSide"> Первая сторона </param>
        /// <param name="secondSide"> Вторая сторона </param>
        /// <param name="thirdSide"> Третья сторона </param>
        /// <param name="expected"> Ожидаемое значение - прямоугольный ли треугольник </param>
        [Theory]
        [InlineData(5.5D, 3D, 4D, false)]
        [InlineData(3D, 4D, 5D, true)]
        [InlineData(12, 20, 17, false)]
        public void IsRectangularTest(double firstSide, double secondSide, double thirdSide, bool expected) 
        {
            var curTriangle = new ClassTriangle(firstSide, secondSide, thirdSide);
            Assert.Equal(expected, curTriangle.IsRectangular);
        }

        /// <summary>
        /// Проверка выбрасывания исключения при вводе отрицательной стороны треугольника
        /// </summary>
        [Fact]
        public void ThrowExceptionNegativeSideTriangleTest() =>
            Assert.Throws<System.Exception>(() => new ClassTriangle(-10D, 8D,4D));

        /// <summary>
        /// Проверка выбрасывания исключения при попытке создать треугольник с некорректными сторонами
        /// </summary>
        [Fact]
        public void ThrowExceptionImpossibleToCreateTriangleTest() =>
            Assert.Throws<System.Exception>(() => new ClassTriangle(10D, 8D, 55D));
    }
}
